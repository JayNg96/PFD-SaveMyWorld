const client = contentful.createClient({ space: "2imdgvtwfj4o", accessToken: "p8CzPxkV--xG2FT22ceTx6Myeflq9wiqUzdrmmjlGqU" }), APIKEY = "6028a9575ad3610fb5bb5fe3", APIKEY2 = "617ffebf63fbb2763ab02509"; console.log(client); const cartBtn = document.querySelector(".cart-btn"), closeCartBtn = document.querySelector(".close-cart"), checkoutCartBtn = document.querySelector(".checkout-cart"), userPoints = document.querySelector(".cart-totalpoint"), cartDOM = document.querySelector(".cart"), cartOverlay = document.querySelector(".cart-overlay"), cartItems = document.querySelector(".cart-items"), cartTotal = document.querySelector(".cart-total"), cartPoint = document.querySelector(".cart-point"), cartContent = document.querySelector(".cart-content"), productsDOM = document.querySelector(".products-center"); let cart = [], totalPoints = 0; parseFloat(localStorage.points) > 0 && (totalPoints = parseFloat(localStorage.points)); let pointEarned = 0; var loginStatus = sessionStorage.getItem("loginStatus"); class Products { async getProducts() { try { let t = (await client.getEntries({ content_type: "shopificationProducts" })).items; return t = t.map(t => { const { title: e, price: a } = t.fields, { id: r } = t.sys; return { title: e, price: a, id: r, image: t.fields.image.fields.file.url } }), console.log(t), t } catch (t) { console.log(t) } } } class UI { displayProducts(t) { let e = ""; t.forEach(t => { e += `\n            \x3c!-- single product --\x3e\n                <article class="product">\n                <div class="img-container">\n                    <img\n                    src=${t.image}\n                    alt="product"\n                    class="product-img"\n                    />\n                    <button class="bag-btn" data-id=${t.id}>\n                    <i class="fa fa-shopping-cart"></i>\n                    add to bag\n                    </button>\n                </div>\n                <h3>${t.title}</h3>\n                <h4>$${t.price}</h4>\n                </article>\n                \x3c!-- end of single product --\x3e\n            ` }); try { productsDOM.innerHTML = e } catch { console.log("This page isn't the product page, product script will not be executed.") } } getBagButtons() { [...document.querySelectorAll(".bag-btn")].forEach(t => { let e = t.dataset.id; cart.find(t => t.id === e) ? (t.innerText = "In Cart", t.disabled = !0) : t.addEventListener("click", t => { t.target.innerText = "In Bag", t.target.disabled = !0; let a = { ...Storage.getProduct(e), amount: 1 }; cart = [...cart, a], Storage.saveCart(cart), this.setCartValues(cart), this.addCartItem(a), this.showCart() }) }) } setCartValues(t) { let e = 0, a = 0, r = 0; t.map(t => { e += t.price * t.amount, a += t.amount, pointEarned = r += .15 * e }), cartTotal.innerText = parseFloat(e.toFixed(2)), cartPoint.innerHTML = parseFloat(r.toFixed(0)), isNaN(parseFloat(localStorage.points)) ? userPoints.innerHTML = 0 : userPoints.innerHTML = parseFloat(localStorage.points), cartItems.innerText = a } addCartItem(t) { const e = document.createElement("div"); e.classList.add("cart-item"), e.innerHTML = `\x3c!-- cart item --\x3e\n            \x3c!-- item image --\x3e\n            <img src=${t.image} alt="product" />\n            \x3c!-- item info --\x3e\n            <div>\n            <h4>${t.title}</h4>\n            <h5>$${t.price}</h5>\n            <span class="remove-item" data-id=${t.id}>remove</span>\n            </div>\n            \x3c!-- item functionality --\x3e\n            <div>\n                <i class="fa fa-chevron-up" data-id=${t.id}></i>\n            <p class="item-amount">\n                ${t.amount}\n            </p>\n                <i class="fa fa-chevron-down" data-id=${t.id}></i>\n            </div>\n        \x3c!-- cart item --\x3e\n    `, cartContent.appendChild(e) } showCart() { cartOverlay.classList.add("transparentBcg"), cartDOM.classList.add("showCart") } setupAPP() { cart = Storage.getCart(), this.setCartValues(cart), this.populateCart(cart), cartBtn.addEventListener("click", this.showCart), closeCartBtn.addEventListener("click", this.hideCart) } populateCart(t) { t.forEach(t => this.addCartItem(t)) } hideCart() { cartOverlay.classList.remove("transparentBcg"), cartDOM.classList.remove("showCart") } cartLogic() { checkoutCartBtn.addEventListener("click", () => { this.checkOutCart() }), cartContent.addEventListener("click", t => { if (t.target.classList.contains("remove-item")) { let e = t.target, a = e.dataset.id; cart = cart.filter(t => t.id !== a), console.log(cart), this.setCartValues(cart), Storage.saveCart(cart), cartContent.removeChild(e.parentElement.parentElement); const r = [...document.querySelectorAll(".bag-btn")]; console.log(r), r.forEach(t => { t.dataset.id === a && (t.disabled = !1, t.innerHTML = '<i class="fa fa-shopping-cart"></i>add to bag') }) } else if (t.target.classList.contains("fa-chevron-up")) { let e = t.target, a = e.dataset.id, r = cart.find(t => t.id === a); r.amount = r.amount + 1, Storage.saveCart(cart), this.setCartValues(cart), e.nextElementSibling.innerText = r.amount } else if (t.target.classList.contains("fa-chevron-down")) { let e = t.target, a = e.dataset.id, r = cart.find(t => t.id === a); if (r.amount = r.amount - 1, r.amount > 0) Storage.saveCart(cart), this.setCartValues(cart), e.previousElementSibling.innerText = r.amount; else { cart = cart.filter(t => t.id !== a), this.setCartValues(cart), Storage.saveCart(cart), cartContent.removeChild(e.parentElement.parentElement), [...document.querySelectorAll(".bag-btn")].forEach(t => { t.dataset.id === a && (t.disabled = !1, t.innerHTML = '<i class="fa fa-shopping-cart"></i>add to bag') }) } } }) } checkOutCart() { for (cart = [], this.setCartValues(cart), Storage.saveCart(cart, totalPoints), cartContent.children.length < 1 || null == cartContent.children.length ? alert("There are no item in cart.") : (alert("Order has been placed! You've earned " + pointEarned.toFixed(0) + " points."), totalPoints += pointEarned, userPoints.innerHTML = parseFloat(totalPoints.toFixed(0)), Storage.savePoint(cart, totalPoints.toFixed(0))), [...document.querySelectorAll(".bag-btn")].forEach(t => { t.disabled = !1, t.innerHTML = '<i class="fa fa-shopping-cart"></i>add to bag' }); cartContent.children.length > 0;)cartContent.removeChild(cartContent.children[0]); this.hideCart() } } class Storage { static saveProducts(t) { localStorage.setItem("products", JSON.stringify(t)) } static getProduct(t) { return JSON.parse(localStorage.getItem("products")).find(e => e.id === t) } static saveCart(t) { localStorage.setItem("cart", JSON.stringify(t)); let e = sessionStorage.getItem("userId"), a = sessionStorage.getItem("username"), r = sessionStorage.getItem("password"); if ("loggedIn" == loginStatus) { let o = { username: a, password: r, cart: JSON.stringify(t) }; console.log(e); var n = { async: !0, crossDomain: !0, url: `https://savetheearth-c589.restdb.io/rest/registered-accounts/${e}`, method: "PUT", headers: { "content-type": "application/json", "x-apikey": APIKEY2, "cache-control": "no-cache" }, processData: !1, data: JSON.stringify(o) }; $.ajax(n).done(function (t) { console.log("test1"), console.log(t) }) } } static getCart() { return "loggedIn" == loginStatus && 0 != sessionStorage.getItem("cart").length ? JSON.parse(sessionStorage.getItem("cart")) : localStorage.getItem("cart") ? JSON.parse(localStorage.getItem("cart")) : [] } static savePoint(t, e) { console.log(t), localStorage.setItem("cart", JSON.stringify(t)) } } document.addEventListener("DOMContentLoaded", () => { const t = new UI, e = new Products; t.setupAPP(), e.getProducts().then(e => { t.displayProducts(e), Storage.saveProducts(e) }).then(() => { t.getBagButtons(), t.cartLogic() }) });